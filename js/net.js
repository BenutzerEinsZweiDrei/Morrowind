// Generated by CoffeeScript 1.10.0
(function() {
  mw.Net = (function() {
    function Net() {
      this.visuals = [];
      this.ws = null;
      this.open = false;
      this.frame = -1;
      this["in"] = {};
      this.out = {};
      this.connect();
    }

    Net.prototype.connect = function() {
      var net;
      net = this;
      this.ws = new WebSocket(mw.mytrade.ws);
      this.ws.onopen = function() {
        console.log('mw ws opened');
        net.open = true;
        net.loop();
        return true;
      };
      this.ws.onmessage = function(evt) {
        net.takein(JSON.parse(evt.data));
        return true;
      };
      this.ws.onclose = function() {
        console.warn('mw ws closed');
        net.open = false;
        return true;
      };
      this.ws.onerror = function(err) {
        console.warn('mw ws err');
        return true;
      };
      return true;
    };

    Net.prototype.takein = function(o) {
      var e, i, j, k, len, len1, len2, m, ref, ref1;
      for (i = 0, len = o.length; i < len; i++) {
        e = o[i];
        if (Object.prototype.toString.call(e) !== '[object Array]') {
          this["in"] = e;
          if (this["in"].removes) {
            ref = this["in"].removes;
            for (j = 0, len1 = ref.length; j < len1; j++) {
              e = ref[j];
              if (this.visuals[e] == null) {
                continue;
              }
              this.visuals[e].dtor();
              delete this.visuals[e];
            }
          }
          if (this["in"].bubbles) {
            ref1 = this["in"].bubbles;
            for (k = 0, len2 = ref1.length; k < len2; k++) {
              m = ref1[k];
              console.log(m);
            }
          }
        }
      }
      return true;
    };

    Net.prototype.loop = function() {
      var a, json;
      a = mw.ply.collect();
      if (a) {
        json = JSON.stringify(a);
        this.ws.send(json);
      }
      if (this.open) {
        setTimeout('mw.net.loop()', 100);
      }
      return true;
    };

    return Net;

  })();

}).call(this);
