// Generated by CoffeeScript 1.10.0
(function() {
  var shrubbery,
    extend = function(child, parent) { for (var key in parent) { if (hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; },
    hasProp = {}.hasOwnProperty;

  shrubbery = {
    Green: {
      width: 120,
      height: 120,
      texture: 'grass/vurt_grass04.dds'
    }
  };

  mw.Grass = (function(superClass) {
    extend(Grass, superClass);

    function Grass(data) {
      this.shrub = shrubbery[data.shrub] || shrubbery.Green;
      data.z += this.shrub.height / 2;
      data.r = -mw.camera.rotation.x;
      data.r *= mw.RADTODEG;
      Grass.__super__.constructor.call(this, data);
      this.type = 'Grass';
    }

    Grass.prototype.shape = function() {
      var geometry, material;
      material = new THREE.MeshLambertMaterial({
        map: mw.textures[this.shrub.texture],
        side: THREE.DoubleSide,
        transparent: true,
        color: 0xcc0000
      });
      geometry = new THREE.PlaneBufferGeometry(this.shrub.width, this.shrub.height, 1);
      this.mesh = new THREE.Mesh(geometry, material);
      this.mesh.rotation.x = -Math.PI / 2;
      this.mesh.scale.z = -1;
      return 1;
    };

    Grass.prototype.pose = function() {
      this.mesh.position.set(this.x, this.y, this.z);
      this.mesh.rotation.y = this.r;
      return 0;
    };

    return Grass;

  })(mw.Prop);

}).call(this);
