// Generated by CoffeeScript 1.9.1
(function() {
  mw.World = (function() {
    function World(data) {
      var j, len, p, ref;
      this.data = data;
      this.x = -2;
      this.y = -9;
      this.cells = [];
      new mw.Cell(this.x, this.y);
      this.props = [];
      this.cached = 0;
      this.queue = 0;
      ref = this.data;
      for (j = 0, len = ref.length; j < len; j++) {
        p = ref[j];
        if (typeof p === "object") {
          this.cache(p.model);
        }
      }
      this.watershed();
    }

    World.prototype.doskybox = function() {
      var geometry, loader;
      geometry = new THREE.CubeGeometry(8192 * 2, 8192 * 2, 8192 * 2);
      loader = new THREE.TGALoader;
      loader.load('models/tx_sky_clear.tga', function(asd) {
        var array, i, j, material;
        asd.wrapS = asd.wrapT = THREE.RepeatWrapping;
        array = [];
        for (i = j = 0; j <= 5; i = ++j) {
          array.push(new THREE.MeshBasicMaterial({
            map: asd,
            side: THREE.BackSide
          }));
        }
        material = new THREE.MeshFaceMaterial(array);
        this.skybox = new THREE.Mesh(geometry, material);
        this.skybox.position.set(mw.terrain.mx, mw.terrain.my, -500);
        return mw.scene.add(this.skybox);
      });
      return true;
    };

    World.prototype.cachcb = function() {
      this.cached++;
      if (this.cached >= this.queue) {
        this.ransack();
      }
      return true;
    };

    World.prototype.ransack = function() {
      var j, len, p, ref;
      ref = this.data;
      for (j = 0, len = ref.length; j < len; j++) {
        p = ref[j];
        if (typeof p === "object") {
          this.props.push(new mw.Prop(p));
        }
      }
      return true;
    };

    World.prototype.cache = function(model) {
      var cb, loader;
      this.queue++;
      cb = function(object) {
        var c, i, j, len, ref;
        mw.models[model] = object;
        ref = object.children;
        for (i = j = 0, len = ref.length; j < len; i = ++j) {
          c = ref[i];
          if (c.material.map) {
            c.material.map.needsUpdate = true;
            c.material.map.onUpdate = function() {
              if (this.wrapS !== THREE.RepeatWrapping || this.wrapT !== THREE.RepeatWrapping) {
                this.wrapS = THREE.RepeatWrapping;
                this.wrapT = THREE.RepeatWrapping;
                return this.needsUpdate = true;
              }
            };
          }
        }
        return mw.world.cachcb();
      };
      loader = new THREE.OBJMTLLoader;
      loader.load("models/" + model + ".obj", "models/" + model + ".mtl", cb);
      return true;
    };

    World.prototype.watershed = function() {
      var geometry, x, y;
      this.mirror = new THREE.Mirror(mw.renderer, mw.camera, {
        clipBias: 0.003,
        textureWidth: 1024,
        textureHeight: 1024,
        color: 0x777777
      });
      geometry = new THREE.PlaneBufferGeometry(8192 * 6, 8192 * 6, 64, 64);
      this.water = new THREE.Mesh(geometry, this.mirror.material);
      this.water.add(this.mirror);
      x = (this.x * 8192) + 4096 - 128;
      y = (this.y * 8192) + 4096 + 128;
      this.water.position.set(x, y, 0);
      mw.scene.add(this.water);
      console.log('added water');
      return true;
    };

    return World;

  })();

}).call(this);
