// Generated by CoffeeScript 1.9.1
(function() {
  var onDocumentMouseMove, onWindowResize, render, stats, windowHalfX, windowHalfY;

  stats = 0;

  mw.mouseX = 0;

  mw.mouseY = 0;

  windowHalfX = window.innerWidth / 2;

  windowHalfY = window.innerHeight / 2;

  mw.boot = function() {
    var ambient, container, directionalLight, loader;
    container = document.createElement('div');
    document.body.appendChild(container);
    this.camera = new THREE.PerspectiveCamera(45, window.innerWidth / window.innerHeight, 1, 5000);
    this.camera.position.set(-11910.683190184747, -70395.6857115308, 455.05078764975525);
    this.controls = new THREE.FirstPersonControls(this.camera);
    this.controls.movementSpeed = 500;
    this.controls.lookSpeed = 0.2;
    this.controls.lookVertical = true;
    this.scene = new THREE.Scene;
    ambient = this.scene.add(new THREE.AmbientLight(0x444444));
    directionalLight = new THREE.DirectionalLight(0xffeedd);
    directionalLight.position.set(0, 0, 1).normalize();
    this.scene.add(directionalLight);
    THREE.Loader.Handlers.add(/\.dds$/i, new THREE.DDSLoader);
    THREE.Loader.Handlers.add(/\.tga$/i, new THREE.TGALoader);
    loader = new THREE.OBJMTLLoader;
    loader.load('male02/male02.obj', 'male02/male02_dds.mtl', function(object) {
      object.position.y = -70395.6857115308;
      object.position.x = -11910.683190184747;
      object.position.z = 455.05078764975525;
      mw.scene.add(object);
    });
    this.renderer = new THREE.WebGLRenderer;
    this.renderer.setPixelRatio(window.devicePixelRatio);
    this.renderer.setSize(window.innerWidth, window.innerHeight);
    container.appendChild(this.renderer.domElement);
    document.addEventListener('mousemove', onDocumentMouseMove, false);
    window.addEventListener('resize', onWindowResize, false);
    return true;
  };

  onWindowResize = function() {
    windowHalfX = window.innerWidth / 2;
    windowHalfY = window.innerHeight / 2;
    mw.camera.aspect = window.innerWidth / window.innerHeight;
    mw.camera.updateProjectionMatrix();
    mw.renderer.setSize(window.innerWidth, window.innerHeight);
  };

  onDocumentMouseMove = function(event) {
    mw.mouseX = (event.clientX - windowHalfX) * 2;
    mw.mouseY = (event.clientY - windowHalfY) * 2;
  };

  mw.animate = function() {
    requestAnimationFrame(mw.animate);
    mw.controls.update(0.016);
    render.call(mw);
  };

  render = function() {
    this.renderer.render(this.scene, this.camera);
  };

}).call(this);
