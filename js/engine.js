// Generated by CoffeeScript 1.10.0
(function() {
  var clock, onDocumentMouseMove, onWindowResize, render, windowHalfX, windowHalfY;

  mw.mouseX = 0;

  mw.mouseY = 0;

  windowHalfX = window.innerWidth / 2;

  windowHalfY = window.innerHeight / 2;

  mw.boot = function() {
    var AmbientDay, AmbientSunrise, SunDay, SunSunrise, container;
    container = document.createElement('div');
    document.body.appendChild(container);
    this.camera = new THREE.PerspectiveCamera(45, window.innerWidth / window.innerHeight, 20, 100000);
    this.camera.position.set(-13088.357563362384, -70417.86172521245, 675.7888756651994);
    this.camera.up = new THREE.Vector3(0, 0, 1);
    this.controls = new THREE.FirstPersonControls(this.camera);
    this.controls.movementSpeed = 1000;
    this.controls.lookSpeed = 0.25;
    this.scene = new THREE.Scene;
    this.scene.fog = new THREE.Fog(0xefd1b5, 2500, 10000);
    AmbientSunrise = 0x424a57;
    AmbientDay = 0x8991a0;
    SunSunrise = 0xf1b163;
    SunDay = 0xffecdd;
    this.scene.add(new THREE.AmbientLight(AmbientDay));
    this.sun = new THREE.DirectionalLight(SunDay, 1);
    this.sun.castShadow = true;
    this.sun.position.set(-600, 300, 600);
    this.scene.add(this.sun);
    THREE.Loader.Handlers.add(/\.dds$/i, new THREE.DDSLoader);
    this.renderer = new THREE.WebGLRenderer;
    this.maxAnisotropy = this.renderer.getMaxAnisotropy();
    this.renderer.setPixelRatio(window.devicePixelRatio);
    this.renderer.setSize(window.innerWidth, window.innerHeight);
    this.renderer.shadowMap.enabled = true;
    this.renderer.shadowMapSoft = true;
    this.renderer.shadowCameraNear = 3;
    this.renderer.shadowCameraFar = this.camera.far;
    this.renderer.shadowCameraFov = 50;
    this.renderer.shadowMapBias = 0.0039;
    this.renderer.shadowMapDarkness = 0.5;
    this.renderer.shadowMapWidth = 1024;
    this.renderer.shadowMapHeight = 1024;
    this.stats = new Stats();
    this.stats.domElement.style.position = 'absolute';
    this.stats.domElement.style.top = '0px';
    container.appendChild(this.stats.domElement);
    container.appendChild(this.renderer.domElement);
    document.addEventListener('mousemove', onDocumentMouseMove, false);
    window.addEventListener('resize', onWindowResize, false);
    this.clock = new THREE.Clock();
    return true;
  };

  onWindowResize = function() {
    windowHalfX = window.innerWidth / 2;
    windowHalfY = window.innerHeight / 2;
    mw.camera.aspect = window.innerWidth / window.innerHeight;
    mw.camera.updateProjectionMatrix();
    mw.renderer.setSize(window.innerWidth, window.innerHeight);
  };

  onDocumentMouseMove = function(event) {
    mw.mouseX = (event.clientX - windowHalfX) * 2;
    mw.mouseY = (event.clientY - windowHalfY) * 2;
  };

  mw.animate = function() {
    var i, j, k, len, ref;
    requestAnimationFrame(mw.animate);
    mw.delta = mw.clock.getDelta();
    if (!mw.freeze) {
      mw.controls.update(mw.delta);
    }
    if (mw.keys[77] === 1) {
      mw.freeze = !mw.freeze;
    }
    if (mw.world) {
      mw.world.step();
    }
    if (mw.water) {
      mw.water.material.uniforms.time.value += 1.0 / 60.0;
    }
    render.call(mw);
    mw.stats.update();
    ref = mw.keys;
    for (i = j = 0, len = ref.length; j < len; i = ++j) {
      k = ref[i];
      if (k) {
        mw.keys[i] = 2;
      }
    }
  };

  clock = new THREE.Clock();

  render = function() {
    var angle;
    angle = Date.now() / 200 * Math.PI;
    if (mw.water) {
      mw.water.render();
    }
    THREE.AnimationHandler.update(clock.getDelta());
    this.renderer.render(this.scene, this.camera);
  };

}).call(this);
