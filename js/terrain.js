// Generated by CoffeeScript 1.9.1
(function() {
  mw.Terrain = (function() {
    function Terrain(x1, y1) {
      var b, g, h, i, j, mx, my, p, px, py, r, ref, x, y;
      this.x = x1;
      this.y = y1;
      this.maps();
      this.vtexmaps();
      this.geometry = new THREE.PlaneGeometry(4096 * 2, 4096 * 2, 64, 64);
      this.mx = mx = (this.x * 8192) + 4096;
      this.my = my = (this.y * 8192) + 4096;
      for (i = j = 0, ref = this.geometry.vertices.length - 1; 0 <= ref ? j <= ref : j >= ref; i = 0 <= ref ? ++j : --j) {
        x = this.geometry.vertices[i].x;
        y = this.geometry.vertices[i].y;
        px = (4096 + x) / 64;
        px /= 2;
        py = (4096 + y) / 64;
        py /= 2;
        p = ((py * 65) + px) * 4;
        r = this.heights[p];
        g = this.heights[p + 1];
        b = this.heights[p + 2];
        if (r === 255) {
          this.geometry.vertices[i].z = h;
          h = -(255 - b) + (255 * ((g - 255) / 8));
        } else if (g) {
          h = (255 * (g / 8)) + b;
        } else {
          h = b;
        }
        this.geometry.vertices[i].z = h;
      }
      this.mkground();
      true;
    }

    Terrain.prototype.mkground = function() {
      this.ground = new THREE.Mesh(this.geometry, this.splat());
      this.ground.position.set(this.mx, this.my, 0);
      return mw.scene.add(this.ground);
    };

    Terrain.prototype.maps = function() {
      var canvas, context, x, y;
      canvas = document.createElement('canvas');
      context = canvas.getContext('2d');
      canvas.width = 65;
      canvas.height = 65;
      context.save();
      context.translate(0, 65);
      context.scale(1, -1);
      x = -(18 + this.x) * 64;
      y = -(27 - this.y) * 64;
      context.drawImage(mw.vvardenfell, x, y);
      context.getImageData(0, 0, 65, 65);
      this.heights = context.getImageData(0, 0, 65, 65).data;
      context.restore();
      context.drawImage(mw.vvardenfell, x, y);
      this.height = new THREE.Texture(canvas);
      this.height.needsUpdate = true;
      this.height.magFilter = THREE.NearestFilter;
      this.height.minFilter = THREE.LinearMipMapLinearFilter;
      canvas = document.createElement('canvas');
      context = canvas.getContext('2d');
      canvas.width = 65;
      canvas.height = 65;
      context.restore();
      context.translate(1, 0);
      context.drawImage(mw.vclr, x, y);
      this.vclr = new THREE.Texture(canvas);
      this.vclr.needsUpdate = true;
      this.vclr.magFilter = THREE.NearestFilter;
      this.vclr.minFilter = THREE.LinearMipMapLinearFilter;
      canvas = document.createElement('canvas');
      canvas.width = 18;
      canvas.height = 18;
      context = canvas.getContext('2d');
      context.translate(1, 1);
      context.drawImage(mw.vtex, x / 4, y / 4);
      this.blues = context.getImageData(0, 0, 18, 18).data;
      this.vtex = new THREE.Texture(canvas);
      this.vtex.needsUpdate = true;
      this.vtexl = new THREE.Texture(canvas);
      this.vtexl.needsUpdate = true;
      this.vtexl.magFilter = THREE.NearestFilter;
      this.vtexl.minFilter = THREE.LinearMipMapLinearFilter;
      return true;
    };

    Terrain.prototype.vtexmaps = function() {
      var b, blues, canvas, color, context, data, i, j, k, l, len, len1, m, masks, n, ref, ref1, t, v;
      masks = [];
      blues = [];
      for (i = j = 0, ref = this.blues.length / 4; 0 <= ref ? j <= ref : j >= ref; i = 0 <= ref ? ++j : --j) {
        b = this.blues[(i * 4) + 2];
        if (blues.indexOf(b) === -1) {
          blues.push(b);
        }
      }
      color = 3;
      for (k = 0, len = blues.length; k < len; k++) {
        b = blues[k];
        if (++color === 4) {
          canvas = document.createElement('canvas');
          $(canvas).attr('mw', "cell " + this.x + ", " + this.y);
          if (this.x === -2 && this.y === -9) {
            document.body.appendChild(canvas);
          }
          context = canvas.getContext('2d');
          canvas.width = 18;
          canvas.height = 18;
          color = 0;
          data = context.createImageData(18, 18);
          masks.push(canvas);
        }
        for (i = l = 0, ref1 = this.blues.length / 4; 0 <= ref1 ? l <= ref1 : l >= ref1; i = 0 <= ref1 ? ++l : --l) {
          v = this.blues[(i * 4) + 2];
          data.data[(i * 4) + color] = v === b ? 255 : 0;
        }
        console.log(data);
        context.putImageData(data, 0, 0);
      }
      for (i = n = 0, len1 = masks.length; n < len1; i = ++n) {
        m = masks[i];
        t = new THREE.Texture(m);
        t.needsUpdate = true;
        masks[i] = t;
        console.log(m);
      }
      console.log(blues.length + " blues for " + this.x + ", " + this.y);
      return this.masks = masks;
    };

    Terrain.prototype.splat = function() {

      /*a = new THREE.ImageUtils.loadTexture 'cloud.png'
      		a.wrapS = a.wrapT = THREE.RepeatWrapping
      		a.repeat.set 64, 64
      
      		b = new THREE.ImageUtils.loadTexture 'water.jpg'
      		b.wrapS = b.wrapT = THREE.RepeatWrapping
      		b.repeat.set 64, 64
       */
      var material;
      material = new THREE.ShaderMaterial({
        uniforms: {
          texturePlacement: {
            type: "t",
            value: this.vtex
          },
          texturePlacementLinear: {
            type: "t",
            value: this.vtexl
          },
          vertexColour: {
            type: "t",
            value: this.vclr
          },
          mossTexture: {
            type: "t",
            value: mw.textures['tx_bc_moss.dds']
          },
          dirtTexture: {
            type: "t",
            value: mw.textures['tx_bc_dirt.dds']
          },
          mudTexture: {
            type: "t",
            value: mw.textures['tx_bc_mud.dds']
          },
          fogColor: {
            type: "c",
            value: mw.scene.fog.color
          },
          fogDensity: {
            type: "f",
            value: mw.scene.fog.density
          },
          fogNear: {
            type: "f",
            value: mw.scene.fog.near
          },
          fogFar: {
            type: "f",
            value: mw.scene.fog.far
          }
        },
        vertexShader: document.getElementById('splatVertexShader').textContent,
        fragmentShader: document.getElementById('splatFragmentShader').textContent,
        fog: true,
        transparent: true
      });
      return material;
      return true;
    };

    return Terrain;

  })();

}).call(this);
